#!/bin/bash

# SPDX-FileCopyrightText: Â© 2024 Technical University of Crete
# SPDX-License-Identifier: MIT

source ./src/log.sh
source ./src/scone.sh
source ./src/lambdas.sh
source ./src/apps.sh

# Input arguments will be stored here
TARGET=""
TARGET_LANG=""
LAMBDA_NAME=""
FUNCTION_NAME=""
DOCKERFILE=""

TAG_NAME=""
ENV_VARS=""
VOL_PATH=""
STATIC_DYNAMIC_BUILD="static"

# Flags to indicate what actions need to be done
NEW_FUNCTION=false
BUILD_IMAGE=false
RUN_CONTAINER=false
CLEANUP=false

# ===============================================================================================

function build_rust_env(){
    # IMPORTANT! DO NOT MODIFY this image name, because Dockerfile/apps/ images depend on this!
    build_image "rust_build_env" "Dockerfiles/apps-base-images/rust-build-env.Dockerfile"
}

# -------------------------------------------------
# HELP MENU
# -------------------------------------------------

function help_menu(){
    echo "Usage: $0 [Option]... [Option]... "
    echo "Usage: $0 --lambda --function-name hello [--cpp/--rust/--python] [--new/--build/--run/--clean]"
    echo "Usage: $0 --app --path Dockerfiles/apps/steganography.Dockerfile [--build/--run]"
    echo "Usage: $0 --edgeless-node [--build/--run]"
    echo "Usage: $0 --edgeless-function --function-name hello [--rust/--python] [--new/--build]"
    echo ""
    echo "Options:"
    echo "  -b, --build                         Use this flag to build the target image from the given function"
    echo "  -c, --clean                         Clean the generated image (this requires to give the function function name you want to clean)"
    echo "  -d, --dynamic                       In case you want to dynamically link your executable use this flag (only for --lambda in --cpp, this produces smaller in size images TBI)"
    echo "  -e, --env-var var                   You can use this, to pass multiple ENV vars during 'docker run ..'"
    echo "  -f, --function-name function        Select the name of the function you want to build or run (requires --lambda/--edgeless-function)"
    echo "  -g, --tag tag_name                  If you want to provide an optional tag for your image, do it using this flag"
    echo "  -h, --help                          Print this help menu and exit"
    echo "  -n, --new                           Use this flag if you want to create a new lambda function"
    echo "  -p, --path                          Use this flag to specify the path to the Dockerfile you want to use (requires --app)"
    echo "  -r, --run                           Pass this flag to run a container"
    echo "  -s, --static                        In case you want to statically link your executable use this flag (only for --lambda in --cpp, this produces larger in size images, default operation)"
    echo "  -v, --volume absolute_path          If you want to bind mound a directory use this option (MUST provide an absolute path)"
    echo 
    echo "      --lambda                        Use this to build a lambda function"
    echo "      --app                           Use this to build from a Dockerfile"
    echo "      --edgeless-node                 Use the edgeless node as target"
    echo "      --edgeless-function             Use this to build an edgeless-function"
    # TODO: before re-enabling this feature, test it
    #echo "      --edgeless-system               Use as a target the whole edgeless system"
    echo 
    echo "      --cpp                           Use a cpp function as target (requires --lambda)"
    echo "      --python                        Use a python function as target (requires --lambda/--edgeless-function)"
    echo "      --rust                          Use a rust function as target (requires --lambda/--edgeless-function)"
}

# ===============================================================================================
# ===============================================================================================
# ===============================================================================================
#                                    __  __       _       
#                                   |  \/  | __ _(_)_ __  
#                                   | |\/| |/ _` | | '_ \ 
#                                   | |  | | (_| | | | | |
#                                   |_|  |_|\__,_|_|_| |_|
# 
# ===============================================================================================
# ===============================================================================================
# ===============================================================================================

# -------------------------------------------------
# Parse input parameters
# -------------------------------------------------
while :
do
    case "$1" in
        -b | --build)                   BUILD_IMAGE=true                        ;;
        -c | --clean)                   CLEANUP=true                            ;;
        -d | --dynamic)                 STATIC_DYNAMIC_BUILD="dynamic"          ;;
        -e | --env-var)                 ENV_VARS+="-e $2 ";             shift   ;;
        -f | --function-name)           FUNCTION_NAME=$2;                shift  ;;
        -g | --tag)                     TAG_NAME=$2;                    shift   ;;
        -h | --help)                    help_menu;                      exit 0  ;;
        -n | --new)                     NEW_FUNCTION=true;                      ;;
        -p | --path)                    DOCKERFILE=$2;                  shift   ;;
        -r | --run)                     RUN_CONTAINER=true                      ;;
        -s | --static)                  STATIC_DYNAMIC_BUILD="static"           ;;
        -v | --volume)                  VOL_PATH=$2;                    shift   ;;

             --app)                     TARGET="app"                            ;;
             --lambda)                  TARGET="lambda"                         ;;
             --edgeless-node)           TARGET="edgeless-node"                  ;;
             --edgeless-function)       TARGET="edgeless-function"              ;;
             #--edgeless-system)         TARGET="edgeless-system"                ;;

             --python)                  TARGET_LANG="python"                    ;;
             --cpp)                     TARGET_LANG="cpp"                       ;;
             --rust)                    TARGET_LANG="rust"                      ;;

        --*)
            echo "Unknown option: $1" >&2
            help_menu
            exit 1
            ;;
        -*)
            echo "Unknown option: $1" >&2
            help_menu
            exit 1 
            ;;
        *) 
            break
    esac
    shift
done

# -------------------------------------------------
# CHECK INPUT PARAMETERS
# -------------------------------------------------

# 1. If we have all needed parameters based on the given target, etc.
# Otherwise, print an error message and exit
if [ -z $TARGET ];  then 
    echo_r " [ERROR] 'target' cannot be empty! Select one of them (--lambda | --app | --edgeless-node  | --edgeless-function)'" ; exit 1 ;
elif [ $TARGET == "lambda" ]; then 
    [ -z "$FUNCTION_NAME" ] && echo_r " [ERROR] 'function name' (-f | --function-name) cannot be empty!" && exit 1
    [ -z "$TARGET_LANG" ] && echo_r " [ERROR] 'target language' (--cpp | --rust | --python) cannot be empty!" && exit 1
    [[ ${NEW_FUNCTION} == "false" && ${BUILD_IMAGE} == "false" && ${RUN_CONTAINER} == "false" && ${CLEANUP} == "false" ]] && echo_r " [ERROR] 'at least one action required' (--new | --build | --run | --clean) cannot be empty!" && exit 1
    LAMBDA_NAME=$FUNCTION_NAME
elif [ $TARGET == "app" ]; then 
    [ -z "$DOCKERFILE" ] && echo_r " [ERROR] 'dockerfile path' (-p | --path) cannot be empty!" && exit 1
    [[ "${BUILD_IMAGE}" == "false" && ${RUN_CONTAINER} == "false" ]] && echo_r " [ERROR] 'at least one action required' (--build | --run) cannot be empty!" && exit 1
elif [ $TARGET == "edgeless-node" ]; then
    [[ "${BUILD_IMAGE}" == "false" && ${RUN_CONTAINER} == "false" ]] && echo_r " [ERROR] 'at least one action required' (--build | --run) cannot be empty!" && exit 1
elif [ $TARGET == "edgeless-system" ]; then
    : # We do not need to check anything
elif [ $TARGET == "edgeless-function" ]; then 
    [ -z "$FUNCTION_NAME" ] && echo_r " [ERROR] 'function name' (-f | --function-name) cannot be empty!" && exit 1
    [[ -z "$TARGET_LANG" || "$TARGET_LANG" == "cpp" ]] && echo_r " [ERROR] 'target language' (--rust | --python) must be one of them!" && exit 1
    [[ "${NEW_FUNCTION}" == "false" && ${BUILD_IMAGE} == "false" ]] && echo_r " [ERROR] 'at least one action required' (--new | --build) cannot be empty!" && exit 1
fi

# 2. Create target image name (only for lambdas) and append if needed also a tag for the image
image_name="secureexecutor-lambda-${TARGET_LANG}-${FUNCTION_NAME}"
[ -z "$TAG_NAME" ] && image_name=${image_name}:"latest" || image_name=${image_name}:${TAG_NAME}

# -------------------------------------------------
# CREATE NEW PLACEHOLDER
# -------------------------------------------------

# If we have enabled new placeholder flag (-n | --new) then create placefolder for code
if ${NEW_FUNCTION} ; then 
    # LAMBDAS
    if [ $TARGET == "lambda" ] ; then
        create_template_project "${TARGET_LANG}" "${FUNCTION_NAME}"

        # Extra actions
        if [ $TARGET_LANG == "cpp" ] ; then
            echo "  > Update ./lambdas/${TARGET_LANG}/${FUNCTION_NAME}/lamda_function.cpp file to implement your lambda"        # Display debug message
            sed -i "s/lambda_sample/${FUNCTION_NAME}/g" ./lambdas/"${TARGET_LANG}"/"${FUNCTION_NAME}"/CMakeLists.txt            # Set correct project name in CMakeLists
        elif [ $TARGET_LANG == "python" ] ; then
            echo "  > Update ./lambdas/${TARGET_LANG}/${FUNCTION_NAME}/lamda_function.py file to implement your lambda"         # Display debug message
        elif [ $TARGET_LANG == "rust" ] ; then
            echo "  > Update ./lambdas/${TARGET_LANG}/${FUNCTION_NAME}/src/lamda_function.rs file to implement your lambda"     # Display debug message
            sed -i "s/lambda_function/${FUNCTION_NAME}/g" ./lambdas/"${TARGET_LANG}"/"${FUNCTION_NAME}"/Cargo.toml              # Set correct project name in Cargo.toml
        fi
    # APPLICATION (From Dockerimages)
    elif [ $TARGET == "app" ] ; then
        : # Nothing to do in this case
    # EDGELESS SPECIFIC
    elif [ $TARGET == "edgeless-function" ] ; then
        edgeless_function_new "${TARGET_LANG}" "${FUNCTION_NAME}"
    fi
fi

# -------------------------------------------------
# BUILD IMAGE
# -------------------------------------------------

# If we have enabled build flag (-b) then build image
if ${BUILD_IMAGE} ; then 
    # LAMBDAS
    if [ $TARGET == "lambda" ] ; then
        [ ! -e "./lambdas/${TARGET_LANG}/${FUNCTION_NAME}" ] && echo_r "[ERROR] Please create first the function placeholder!" && exit 0

        # Build image
        if      [ $TARGET_LANG == "python" ]; then  build_python_image "${FUNCTION_NAME}" "${image_name}"
        elif    [ $TARGET_LANG == "cpp" ]   ; then  build_cpp_image "${FUNCTION_NAME}" "${image_name}" "${STATIC_DYNAMIC_BUILD}"
        elif    [ $TARGET_LANG == "rust" ]  ; then  build_rust_image "${FUNCTION_NAME}" "${image_name}"
        fi
    # APPLICATION (From Dockerimages)
    elif [ $TARGET == "app" ] ; then
        project_build_from_dockerimage "${DOCKERFILE}"
    # EDGELESS SPECIFIC
    elif [ $TARGET == "edgeless-node" ] ; then
        build_edgeless_node
    elif [ $TARGET == "edgeless-system" ] ; then
        build_rust_env
        build_edgeless_system_image
    elif [ $TARGET == "edgeless-function" ] ; then
        edgeless_function_build "${TARGET_LANG}" "${FUNCTION_NAME}"
    fi
fi

# -------------------------------------------------
# RUN CONTAINER
# -------------------------------------------------

# If we have enabled run flag (-r | --run) then also run the container
if ${RUN_CONTAINER} ; then 
    if      [ $TARGET == "lambda" ] ; then          run_container "${LAMBDA_NAME}" "${image_name}" "${ENV_VARS}" "${VOL_PATH}"
    elif    [ $TARGET == "app" ] ; then             project_run_from_dockerimage "${DOCKERFILE}" "${ENV_VARS}"
    elif    [ $TARGET == "edgeless-node" ] ; then   run_edgeless_node
    elif    [ $TARGET == "edgeless-system" ] ; then
        docker run -it --rm --network=edgeless_network --name edgeless_system -w /home/user/edgeless/target/debug -p 7011:7011 -p 7001:7001 edgeless_system bash -c "./run_edgeless_system.sh"
    fi
fi

# -------------------------------------------------
# CLEAN UP
# -------------------------------------------------

# If we have enabled clean flag (-c) then clean any generated images/containers
if ${CLEANUP} ; then 
    remove_image "${image_name}"
fi
